import java.util.Scanner;
import java.util.Map;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
 */
public class GameEngine {
    private Scanner scanner;
    private CharacterFactory characterFactory;
    private ItemFactory itemFactory;
    private BattleSystem battleSystem;
    private Dungeon dungeon;
    private Hero currentHero;
    private CharacterLogger logger;
    
    public GameEngine() {
        this.scanner = new Scanner(System.in);
        this.characterFactory = new GameCharacterFactory();
        this.itemFactory = new ItemFactory();
        this.battleSystem = new InteractiveBattleSystem();
        this.dungeon = new Dungeon();
        this.logger = new CharacterLogger();
        initializeDungeon();
    }
    
    private void initializeDungeon() {
        // –ö–æ–º–Ω–∞—Ç–∞ 1 —Å –≥–æ–±–ª–∏–Ω–∞–º–∏
        Room room1 = new Room("–í—Ö–æ–¥ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ", "–¢–µ–º–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å –≥–æ–±–ª–∏–Ω–∞–º–∏");
        room1.addMonster(characterFactory.createMonster("goblin"));
        room1.addMonster(characterFactory.createMonster("goblin"));
        room1.addItem(itemFactory.createItem("potion"));
        dungeon.addRoom(room1);
        
        // –ö–æ–º–Ω–∞—Ç–∞ 2 —Å —Å–∫–µ–ª–µ—Ç–∞–º–∏
        Room room2 = new Room("–ö–æ—Å—Ç—è–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞", "–ö–æ–º–Ω–∞—Ç–∞, –ø–æ–ª–Ω–∞—è —Å–∫–µ–ª–µ—Ç–æ–≤");
        room2.addMonster(characterFactory.createMonster("skeleton"));
        room2.addMonster(characterFactory.createMonster("skeleton"));
        room2.addItem(itemFactory.createItem("sword"));
        room2.addItem(itemFactory.createItem("shield"));
        dungeon.addRoom(room2);
        
        // –ö–æ–º–Ω–∞—Ç–∞ 3 —Å –¥—Ä–∞–∫–æ–Ω–æ–º (–±–æ—Å—Å)
        Room room3 = new Room("–õ–æ–≥–æ–≤–æ –¥—Ä–∞–∫–æ–Ω–∞", "–û–≥—Ä–æ–º–Ω–∞—è –ø–µ—â–µ—Ä–∞ —Å –¥—Ä–∞–∫–æ–Ω–æ–º");
        room3.addMonster(characterFactory.createMonster("dragon"));
        room3.addItem(itemFactory.createItem("firesword"));
        room3.addItem(itemFactory.createItem("greaterpotion"));
        dungeon.addRoom(room3);
    }
    
    public void startGame() {
        System.out.println("-- –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ü–û–î–ó–ï–ú–ï–õ–¨–ï! --");
        System.out.println("–ú–∏–Ω–∏ RPG==–ë–∏—Ç–≤–∞=–≤=–ø–æ–¥–∑–µ–º–µ–ª—å–µ==");
        System.out.println();
        
        // —Å–æ–∑–¥–Ω–∏–µ –≥–µ—Ä–æ—è 
        createHero();
        
        // –∏–≥—Ä–æ–≤–æ–µ–π —Ü–∏–∫–ª 
        gameLoop();
        
        // –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ 
        endGame();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ—Ä–æ—è
     */
    private void createHero() {
        System.out.println("–°–æ–∑–¥–∞–Ω–∏–µ –≥–µ—Ä–æ—è:");
        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –≥–µ—Ä–æ—è:");
        System.out.println("1. –í–æ–∏–Ω (–≤—ã—Å–æ–∫–æ–µ HP, —Å—Ä–µ–¥–Ω—è—è –∞—Ç–∞–∫–∞, –≤—ã—Å–æ–∫–∞—è –∑–∞—â–∏—Ç–∞)");
        System.out.println("2. –ú–∞–≥ (–Ω–∏–∑–∫–æ–µ HP, –≤—ã—Å–æ–∫–∞—è –∞—Ç–∞–∫–∞, –Ω–∏–∑–∫–∞—è –∑–∞—â–∏—Ç–∞)");
        System.out.println("3. –õ—É—á–Ω–∏–∫ (—Å—Ä–µ–¥–Ω–µ–µ HP, —Å—Ä–µ–¥–Ω—è—è –∞—Ç–∞–∫–∞, —Å—Ä–µ–¥–Ω—è—è –∑–∞—â–∏—Ç–∞)");
        
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ (1-3): ");
        int classChoice = Integer.parseInt(scanner.nextLine());
        
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–µ—Ä–æ—è: ");
        String heroName = scanner.nextLine();
        
        String heroType;
        switch (classChoice) {
            case 1:
                heroType = "warrior";
                break;
            case 2:
                heroType = "mage";
                break;
            case 3:
                heroType = "archer";
                break;
            default:
                heroType = "warrior";
                System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –°–æ–∑–¥–∞–Ω –≤–æ–∏–Ω.");
        }
        
        currentHero = characterFactory.createHero(heroType, heroName);
        System.out.println("\n–°–æ–∑–¥–∞–Ω –≥–µ—Ä–æ–π: " + currentHero);
        System.out.println();
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
     */
    private void gameLoop() {
        while (currentHero.isAlive() && dungeon.hasMoreRooms()) {
            Room currentRoom = dungeon.getCurrentRoom();
            
            System.out.println("\n=== " + currentRoom.getName().toUpperCase() + " ===");
            System.out.println(currentRoom.getDescription());
            
            if (!currentRoom.isVisited()) {
                // –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
                exploreRoom(currentRoom);
                currentRoom.setVisited(true);
            }
            
            // –ë–æ–π —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
            if (!battleMonstersInRoom(currentRoom)) {
                break; // –ì–µ—Ä–æ–π –ø–æ–≥–∏–±
            }
            
            // –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–Ω–∞—Ç—É
            if (dungeon.moveToNextRoom()) {
                System.out.println("\n–í—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–Ω–∞—Ç—É...");
            }
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (currentHero.isAlive()) {
            System.out.println("\nüéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ!");
            dungeon.updatePlayerRanking(currentHero.getName(), 1);
        }
    }
    
    /**
     * –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
     */
    private void exploreRoom(Room room) {
        System.out.println("\n–í—ã –∏—Å—Å–ª–µ–¥—É–µ—Ç–µ –∫–æ–º–Ω–∞—Ç—É...");
        
        // –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        Item foundItem = room.getRandomItem();
        if (foundItem != null) {
            System.out.println("–í—ã –Ω–∞—à–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: " + foundItem.getName());
            System.out.println("–û–ø–∏—Å–∞–Ω–∏–µ: " + foundItem.getDescription());
            
            System.out.print("–í–∑—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç? (y/n): ");
            String choice = scanner.nextLine().toLowerCase();
            
            if (choice.equals("y") || choice.equals("yes")) {
                try {
                    currentHero.addItem(foundItem);
                    System.out.println("–ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!");
                } catch (InventoryFullException e) {
                    System.out.println("–û—à–∏–±–∫–∞: " + e.getMessage());
                }
            }
        }
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω—Å—Ç—Ä–∞—Ö
        if (!room.getMonsters().isEmpty()) {
            System.out.println("\n–í –∫–æ–º–Ω–∞—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–æ–Ω—Å—Ç—Ä—ã:");
            for (Monster monster : room.getMonsters()) {
                System.out.println("- " + monster.getName() + " (HP: " + monster.getHealth() + ")");
            }
        }
    }
    
    /**
     * –ë–æ–π —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
     */
    private boolean battleMonstersInRoom(Room room) {
        for (Monster monster : room.getMonsters()) {
            if (!monster.isAlive()) {
                continue;
            }
            
            System.out.println("\n‚öîÔ∏è –ë–û–ô –° " + monster.getName().toUpperCase() + "!");
            
            boolean victory = battleSystem.fight(currentHero, monster);
            if (!victory) {
                return false; // –ì–µ—Ä–æ–π –ø–æ–≥–∏–±
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–æ—è–º–∏
            System.out.println("\n–í—ã –æ—Ç–¥—ã—Ö–∞–µ—Ç–µ –ø–æ—Å–ª–µ –±–æ—è...");
            currentHero.heal(10); // –ù–µ–±–æ–ª—å—à–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –±–æ—è–º–∏
        }
        
        return true; // –í—Å–µ –º–æ–Ω—Å—Ç—Ä—ã –ø–æ–±–µ–∂–¥–µ–Ω—ã
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
     */
    private void endGame() {
        System.out.println("\n=== –ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê ===");
        System.out.println("–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        System.out.println(currentHero);
        
        if (!currentHero.getInventory().isEmpty()) {
            System.out.println("\n–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:");
            for (int i = 0; i < currentHero.getInventory().size(); i++) {
                System.out.println((i + 1) + ". " + currentHero.getInventory().get(i));
            }
        }
        
        System.out.println("\n–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤:");
        Map<String, Integer> rankings = dungeon.getPlayerRankings();
        if (rankings.isEmpty()) {
            System.out.println("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.");
        } else {
            for (Map.Entry<String, Integer> entry : rankings.entrySet()) {
                System.out.println(entry.getKey() + ": " + entry.getValue() + " –ø–æ–±–µ–¥");
            }
        }
        
        scanner.close();
    }
}
